{"ast":null,"code":"import { all, call, fork, put, takeEvery } from \"redux-saga/effects\";\nimport { add, set, remove, updateStatus, toggleAllTodos, edit } from \"../../container/Client/TodoList/module/todosSlice\";\nimport ApiFrontend from '../../service/api-frontend';\nimport * as actionTypes from \"../actionTypes/todosActionTypes\";\n\n// worker Saga: will be fired on actionTypes.CREATE_TODO actions\nconst createTodo = function (_ref) {\n  let {\n    payload\n  } = _ref;\n  return function* () {\n    try {\n      const res = yield call(ApiFrontend.createTodoService, payload.content, payload.created_date);\n      yield put(add(res));\n    } catch (error) {}\n  }();\n};\n\n// worker Saga\nconst getTodos = function* () {\n  try {\n    const res = yield call(ApiFrontend.getTodosService);\n    if (res.length) {\n      yield put(set(res));\n    }\n  } catch (error) {}\n};\nconst deleteTodos = function (_ref2) {\n  let {\n    payload\n  } = _ref2;\n  return function* () {\n    try {\n      const message = yield call(ApiFrontend.deleteTodosService, payload);\n      yield put(remove({\n        selected_id: payload,\n        message: message\n      }));\n    } catch (error) {}\n  }();\n};\nconst updateTodoStatus = function (_ref3) {\n  let {\n    payload\n  } = _ref3;\n  return function* () {\n    try {\n      const message = yield call(ApiFrontend.updateTodoStatusService, payload.todo_id, payload.checked);\n      yield put(updateStatus({\n        todoId: payload.todo_id,\n        checked: payload.checked,\n        message: message\n      }));\n    } catch (error) {}\n  }();\n};\nconst toggleAllTodosStatus = function (_ref4) {\n  let {\n    payload\n  } = _ref4;\n  return function* () {\n    try {\n      const message = yield call(ApiFrontend.toggleAllStatusService, payload.selected_date, payload.by_date);\n      yield put(toggleAllTodos(message));\n    } catch (error) {}\n  }();\n};\nconst editTodoContentById = function (_ref5) {\n  let {\n    payload\n  } = _ref5;\n  return function* () {\n    try {\n      const message = yield call(ApiFrontend.editTodoContent, payload.id, payload.new_content);\n      yield put(edit({\n        id: payload.id,\n        new_content: payload.new_content,\n        message: message\n      }));\n    } catch (error) {}\n  }();\n};\n\n// starts 'createTodo' or 'getTodos' on each dispatched  'actionTypes.CREATE_TODO' or 'actionTypes.GET_TODOS' action.\n// allows concurrent creates of todo with 'takeEvery' (Does not allow concurrent with 'takeLastest')\nconst watchTodoSaga = function* () {\n  yield takeEvery(actionTypes.CREATE_TODO, createTodo);\n  yield takeEvery(actionTypes.GET_TODOS, getTodos);\n  yield takeEvery(actionTypes.DELETE_TODOS, deleteTodos);\n  yield takeEvery(actionTypes.UPDATE_TODO_STATUS, updateTodoStatus);\n  yield takeEvery(actionTypes.TOGGLE_ALL_STATUS, toggleAllTodosStatus);\n  yield takeEvery(actionTypes.EDIT_TODO_CONTENT, editTodoContentById);\n};\nexport default function* TodosSaga() {\n  yield all([fork(watchTodoSaga)]);\n}\n_c = TodosSaga;\nvar _c;\n$RefreshReg$(_c, \"TodosSaga\");","map":{"version":3,"names":["all","call","fork","put","takeEvery","add","set","remove","updateStatus","toggleAllTodos","edit","ApiFrontend","actionTypes","createTodo","payload","res","createTodoService","content","created_date","error","getTodos","getTodosService","length","deleteTodos","message","deleteTodosService","selected_id","updateTodoStatus","updateTodoStatusService","todo_id","checked","todoId","toggleAllTodosStatus","toggleAllStatusService","selected_date","by_date","editTodoContentById","editTodoContent","id","new_content","watchTodoSaga","CREATE_TODO","GET_TODOS","DELETE_TODOS","UPDATE_TODO_STATUS","TOGGLE_ALL_STATUS","EDIT_TODO_CONTENT","TodosSaga"],"sources":["/Users/differwor/Documents/P - Work/redux-saga/project-3/src/sagas/sagas/todosSaga.ts"],"sourcesContent":["import { all, call, fork, put, takeEvery } from \"redux-saga/effects\";\r\nimport { add, set, remove, updateStatus, toggleAllTodos, edit } from \"../../container/Client/TodoList/module/todosSlice\";\r\nimport { Todo } from \"../../models/todo\";\r\nimport ApiFrontend from '../../service/api-frontend';\r\nimport * as actionTypes from \"../actionTypes/todosActionTypes\";\r\n\r\n// worker Saga: will be fired on actionTypes.CREATE_TODO actions\r\nconst createTodo = function* ({payload}: actionTypes.CreateTodoAction) {\r\n\ttry {\r\n\t\tconst res: Todo = yield call(ApiFrontend.createTodoService, payload.content, payload.created_date );\r\n\t\tyield put(add(res)); \r\n\t} catch (error) {\r\n\t\t\r\n\t}\r\n} \r\n\r\n// worker Saga\r\nconst getTodos = function* () {\r\n\ttry {\r\n\t\tconst res: Todo[] = yield call(ApiFrontend.getTodosService);\r\n\t\tif (res.length) {\r\n\t\t\tyield put(set(res));\r\n\t\t}\r\n\t} catch (error) {\r\n\t\t\r\n\t}\r\n}\r\n\r\nconst deleteTodos = function* ({payload}: actionTypes.DeleteTodosAction) {\r\n\ttry {\r\n\t\tconst message: string = yield call(ApiFrontend.deleteTodosService, payload);\r\n\t\tyield put(remove({selected_id: payload, message: message}));\r\n\t} catch (error) {\r\n\t\t\r\n\t}\r\n}\r\n\r\nconst updateTodoStatus = function* ({payload}: actionTypes.UpdateTodoAction) {\r\n\ttry {\r\n\t\tconst message: string = yield call(ApiFrontend.updateTodoStatusService, payload.todo_id, payload.checked);\r\n\t\tyield put(updateStatus({todoId: payload.todo_id, checked: payload.checked, message: message}));\r\n\t} catch (error) {\r\n\t\t\r\n\t}\r\n}\r\n\r\nconst toggleAllTodosStatus = function* ({payload}: actionTypes.ToggleStatusAction) {\r\n\ttry {\r\n\t\tconst message: string = yield call(ApiFrontend.toggleAllStatusService, payload.selected_date, payload.by_date);\r\n\t\tyield put(toggleAllTodos(message));\r\n\t} catch (error) {\r\n\t\t\r\n\t}\r\n}\r\n\r\nconst editTodoContentById = function* ({payload}: actionTypes.EditTodoAction) {\r\n\ttry {\r\n\t\tconst message: string = yield call(ApiFrontend.editTodoContent, payload.id, payload.new_content);\r\n\t\tyield put(edit({id: payload.id, new_content: payload.new_content, message: message}));\r\n\t} catch (error) {\r\n\t\t\r\n\t} \r\n}\r\n\r\n// starts 'createTodo' or 'getTodos' on each dispatched  'actionTypes.CREATE_TODO' or 'actionTypes.GET_TODOS' action.\r\n// allows concurrent creates of todo with 'takeEvery' (Does not allow concurrent with 'takeLastest')\r\nconst watchTodoSaga = function* () {\r\n\tyield takeEvery(actionTypes.CREATE_TODO, createTodo);\r\n\tyield takeEvery(actionTypes.GET_TODOS, getTodos);\r\n\tyield takeEvery(actionTypes.DELETE_TODOS, deleteTodos);\r\n\tyield takeEvery(actionTypes.UPDATE_TODO_STATUS, updateTodoStatus);\r\n\tyield takeEvery(actionTypes.TOGGLE_ALL_STATUS, toggleAllTodosStatus);\r\n\tyield takeEvery(actionTypes.EDIT_TODO_CONTENT, editTodoContentById);\r\n}\r\n\r\nexport default function* TodosSaga() {\r\n\tyield all([fork(watchTodoSaga)]);\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}