{"ast":null,"code":"import { TodoStatus } from \"../../../../models/todo\";\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport { getDateString } from '../../../../utils/utils';\nconst initialState = {\n  todoList: [],\n  notedDate: [],\n  selectedDate: getDateString(new Date()),\n  filter: {\n    byDate: false,\n    byStatus: TodoStatus.NONE\n  },\n  message: ''\n};\nexport const todosSlice = createSlice({\n  name: 'todosActionTypes',\n  // type prefix of action\n  initialState,\n  reducers: {\n    set: (state, action) => {\n      action.payload.forEach(todo => {\n        if (!state.notedDate.includes(todo.created_date)) {\n          state.notedDate = [...state.notedDate, todo.created_date];\n        }\n      });\n      state.todoList = action.payload;\n    },\n    add: (state, action) => {\n      state.todoList = [...state.todoList, action.payload];\n      if (!state.notedDate.includes(action.payload.created_date)) {\n        state.notedDate = [...state.notedDate, action.payload.created_date];\n      }\n    },\n    updateStatus: (state, action) => {\n      if (action.payload.message !== 'Error!') {\n        const indexSelected = state.todoList.findIndex(todo => todo.id === action.payload.todoId);\n        state.todoList[indexSelected].status = action.payload.checked ? TodoStatus.ACTIVE : TodoStatus.COMPLETED;\n      }\n      state.message = action.payload.message;\n    },\n    remove: (state, action) => {\n      if (action.payload.message !== 'Error!') {\n        state.todoList = state.todoList.filter(todo => !action.payload.selected_id.includes(todo.id));\n      }\n      state.message = action.payload.message;\n    },\n    toggleAllTodos: (state, action) => {\n      const newTodos = state.todoList.map(todo => {\n        if (!state.filter.byDate) {\n          return {\n            ...todo,\n            status: TodoStatus.ACTIVE\n          };\n        }\n        return todo.created_date === state.selectedDate ? {\n          ...todo,\n          status: TodoStatus.ACTIVE\n        } : todo;\n      });\n      state.todoList = newTodos;\n      state.message = action.payload;\n    },\n    setSelectedDate: (state, action) => {\n      state.selectedDate = action.payload;\n    },\n    changeFilterType: (state, action) => {\n      Object.keys(action.payload).forEach(e => {\n        if (e === 'byDate') {\n          state.filter.byDate = action.payload.byDate;\n        } else if (e === 'byStatus') {\n          state.filter.byStatus = action.payload.byStatus;\n        }\n      });\n    },\n    setMessage: (state, action) => {\n      state.message = action.payload;\n    },\n    edit: (state, action) => {\n      const todoIndex = state.todoList.findIndex(todo => todo.id === action.payload.id);\n      if (todoIndex >= 0) {\n        state.todoList[todoIndex].content = action.payload.new_content;\n        state.message = action.payload.message;\n      }\n    }\n  }\n});\nexport const {\n  set,\n  add,\n  updateStatus,\n  remove,\n  toggleAllTodos,\n  setSelectedDate,\n  changeFilterType,\n  setMessage,\n  edit\n} = todosSlice.actions;\n\n// Other code such as selectors can use the imported `RootState` type (same as useSelector)\nexport const selectTodos = state => state.todos;\nexport default todosSlice.reducer;","map":{"version":3,"names":["TodoStatus","createSlice","getDateString","initialState","todoList","notedDate","selectedDate","Date","filter","byDate","byStatus","NONE","message","todosSlice","name","reducers","set","state","action","payload","forEach","todo","includes","created_date","add","updateStatus","indexSelected","findIndex","id","todoId","status","checked","ACTIVE","COMPLETED","remove","selected_id","toggleAllTodos","newTodos","map","setSelectedDate","changeFilterType","Object","keys","e","setMessage","edit","todoIndex","content","new_content","actions","selectTodos","todos","reducer"],"sources":["/Users/differwor/Documents/P - Work/redux-saga/project-3/src/container/Client/TodoList/module/todosSlice.ts"],"sourcesContent":["import { Todo, TodoStatus } from \"../../../../models/todo\"\r\nimport { createSlice, PayloadAction } from \"@reduxjs/toolkit\"\r\nimport { RootState } from '../../../../app/store';\r\nimport { getDateString } from '../../../../utils/utils';\r\nimport * as payloadTypes from './payloadTypes';\r\n\r\n// interface\r\ninterface TodosState {\r\n\ttodoList: Todo[],\r\n\tnotedDate: string[], // format \"2022-5-19\"\r\n\tselectedDate: string, \r\n\tfilter: {\r\n\t\tbyDate: boolean | undefined, \r\n\t\tbyStatus: TodoStatus | undefined\r\n\t},\r\n\tmessage: string \r\n}\r\n\r\nconst initialState: TodosState = {\r\n\ttodoList: [],\r\n\tnotedDate: [],\r\n\tselectedDate: getDateString(new Date()),\r\n\tfilter: {\r\n\t\tbyDate: false,\r\n\t\tbyStatus: TodoStatus.NONE\r\n\t},\r\n\tmessage: ''\r\n}\r\n\r\nexport const todosSlice = createSlice({\r\n\tname: 'todosActionTypes', // type prefix of action\r\n\tinitialState,\r\n\treducers: {\r\n\t\tset: (state, action: PayloadAction<Todo[]>) => {\r\n\t\t\taction.payload.forEach((todo) => {\r\n\t\t\t\tif (!state.notedDate.includes(todo.created_date)) {\r\n\t\t\t\t\tstate.notedDate = [...state.notedDate, todo.created_date];\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\tstate.todoList = action.payload;\r\n\t\t},\r\n\t\tadd: (state, action: PayloadAction<Todo>) => {\r\n\t\t\tstate.todoList = [...state.todoList, action.payload]; \r\n\t\t\tif (!state.notedDate.includes(action.payload.created_date)) {\r\n\t\t\t\tstate.notedDate = [...state.notedDate, action.payload.created_date];\r\n\t\t\t} \r\n\t\t},\r\n\t\tupdateStatus: (state, action: PayloadAction<payloadTypes.UpdateTodoStatusAction>) => {\r\n\t\t\tif (action.payload.message !== 'Error!') {\r\n\t\t\t\tconst indexSelected = state.todoList.findIndex((todo) => todo.id === action.payload.todoId);\r\n\t\t\t\tstate.todoList[indexSelected].status = action.payload.checked ? TodoStatus.ACTIVE : TodoStatus.COMPLETED;\r\n\t\t\t}\r\n\t\t\tstate.message = action.payload.message;\r\n\t\t},\r\n\t\tremove: (state, action: PayloadAction<payloadTypes.RemoveTodoAction>) => { \r\n\t\t\tif (action.payload.message !== 'Error!') {\r\n\t\t\t\tstate.todoList = state.todoList.filter(todo => !action.payload.selected_id.includes(todo.id));\r\n\t\t\t}\r\n\t\t\tstate.message = action.payload.message;\r\n\t\t},\r\n\t\ttoggleAllTodos: (state, action: PayloadAction<string>) => {\r\n\t\t\tconst newTodos =  state.todoList.map((todo) => { \r\n\t\t\t\tif (!state.filter.byDate) {\r\n\t\t\t\t\treturn {\r\n\t\t\t\t\t\t...todo, \r\n\t\t\t\t\t\tstatus: TodoStatus.ACTIVE\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn todo.created_date === state.selectedDate ? {\r\n\t\t\t\t\t...todo, \r\n\t\t\t\t\tstatus: TodoStatus.ACTIVE\r\n\t\t\t\t} : todo\r\n\t\t\t});\r\n\t\t\tstate.todoList = newTodos;\r\n\t\t\tstate.message = action.payload;\r\n\t\t},\r\n\t\tsetSelectedDate: (state, action: PayloadAction<string>) => {\r\n\t\t\tstate.selectedDate = action.payload;\r\n\t\t},\r\n\t\tchangeFilterType: (state, action: PayloadAction<payloadTypes.ChangeFilterTypeAction>) => {\r\n\t\t\tObject.keys(action.payload).forEach((e) => {\r\n\t\t\t\tif (e === 'byDate') {\r\n\t\t\t\t\tstate.filter.byDate = action.payload.byDate;\r\n\t\t\t\t} else if (e === 'byStatus') {\r\n\t\t\t\t\tstate.filter.byStatus = action.payload.byStatus;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},\r\n\t\tsetMessage: (state, action: PayloadAction<string>) => {\r\n\t\t\tstate.message = action.payload;\r\n\t\t}, \r\n\t\tedit: (state, action: PayloadAction<payloadTypes.EditTodoAction>) => {\r\n\t\t\tconst todoIndex = state.todoList.findIndex(todo => todo.id === action.payload.id);\r\n\t\t\tif (todoIndex >= 0) {\r\n\t\t\t\tstate.todoList[todoIndex].content = action.payload.new_content;\r\n\t\t\t\tstate.message = action.payload.message;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n})\r\n\r\nexport const { set, add, updateStatus, remove, toggleAllTodos, setSelectedDate, changeFilterType, setMessage, edit } = todosSlice.actions\r\n\r\n// Other code such as selectors can use the imported `RootState` type (same as useSelector)\r\nexport const selectTodos = (state: RootState) => state.todos\r\n\r\nexport default todosSlice.reducer"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}